<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="content-type" content="text/html; charset={+IO.encoding+}" />
        <meta name="generator" content="JsDoc Toolkit" />
        {! Link.base = "../"; /* all generated links will be relative to this */ !}
        <title>Firebug API Reference - {+data.alias+}</title>

        <style type="text/css">
        {+include("static/default.css")+}
        </style>
        <link href="../prettify.css" type="text/css" rel="stylesheet" />
        <script type="text/javascript" src="../prettify.js"></script>
    </head>

<body onload="prettyPrint()">
    <div id="container">
<!-- ============================== header ================================= -->    
        <!-- begin static/header.html -->
        {+include("static/header.html")+}
        <!-- end static/header.html -->

<!-- ============================== classes index ============================ -->
        <div id="index">
            <!-- begin publish.classesIndex -->
            {+publish.classesIndex+}
            <!-- end publish.classesIndex -->
        </div>

        <div id="content">
            <a class="reportIssue" href="http://code.google.com/p/fbug/issues/entry?template=API Reference Report">Report Doc Issue</a>
             |
            <a href="http://getfirebug.com/wiki/index.php/Firebug_Source_Code_Comments">How To Comment Firebug Code</a>
<!-- ============================== class title ============================ -->
            <h1 class="classTitle">
                {!
                    var classType = "";

                    if (data.isBuiltin()) {
                        classType += "Built-In ";
                    }

                    if (data.isScope) {
                        classType += "Scope ";
                    }
                    else if (data.isNamespace) {
                        if (data.is('FUNCTION')) {
                            classType += "Function ";
                        }
                        classType += "Namespace ";
                    }
                    else {
                        classType += "Class ";
                    }
                !}
                {+classType+}{+data.alias+}
            </h1>


<!-- debug info -->
<if test="false && data.scopeChain.length">
{!
    var result = [];
    var scopeChain = data.scopeChain;
    for (var ns=0, nl=scopeChain.length; ns<nl; ns++)
    {
        var alias = scopeChain[ns].alias;
        result.push(alias);
    }
    sys[out++] = "::scope debug info = " + result.join(", ");
!}
</if>


<!-- ============================== class summary ========================== -->            
            <if test="data.version"><br />Version
                   {+ data.version +}.<br />
            </if>
            <if test="data.dialog"><br />
                   {+ data.dialog +}<br />
            </if>
            <p class="description">
                <if test="data.augments.length"><br />Extends
                    {+
                        data.augments
                        .sort()
                        .map(
                            function($) { return new Link().toSymbol($); }
                        )
                        .join(", ")
                    +}.<br />
                </if>
                {+resolveLinks(data.classDesc)+}
                <p>
                <if test="!data.isBuiltin()">{# isn't defined in any file #}
                    <i>Defined in: </i> {+new Link().toSrc(data.srcFile, data.lineNumber)+}.
                </if>
                </p>
            </p>

<!-- ============================== constructor summary ==================== -->            
            <if test="!data.isBuiltin() && !data.isScope && (data.isNamespace || data.is('CONSTRUCTOR'))">
            <table class="summaryTable" cellspacing="0" summary="A summary of the constructor documented in the class {+data.alias+}.">
                <caption>{+classType+}Summary</caption>
                <thead>
                    <tr>
                        <th scope="col">Constructor Attributes</th>
                        <th scope="col">Constructor Name and Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="attributes">{!
                            if (data.isPrivate) sys[out++] = "&lt;private&gt; ";
                            if (data.isInner) sys[out++] = "&lt;inner&gt; ";
                        !}&nbsp;</td>
                        <td class="nameDescription" {!if (data.comment.getTag("hilited").length){sys[out++] = 'style="color: red"'}!}>
                            <div class="fixedFont">
                                <b>{+ new Link().toSymbol(data.alias).inner('constructor')+}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
                            </div>
                            <div class="description">{+resolveLinks(summarize(data.desc))+}</div>
                        </td>
                    </tr>
                </tbody>
            </table>
            </if>

<!-- ============================== properties summary ===================== -->
            <if test="data.properties.length">
                {! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
                <if test="ownProperties.length">
                <table class="summaryTable" cellspacing="0" summary="A summary of the fields documented in the class {+data.alias+}.">
                    <caption>Field Summary</caption>
                    <thead>
                        <tr>
                            <th scope="col">Field Attributes</th>
                            <th scope="col">Field Name and Description</th>
                        </tr>
                    </thead>
                    <tbody>
                    <for each="member" in="ownProperties">
                        <tr>
                            <td class="attributes">{!
                                if (member.isPrivate) sys[out++] = "&lt;private&gt; ";
                                if (member.isInner) sys[out++] = "&lt;inner&gt; ";
                                if (member.isStatic) sys[out++] = "&lt;static&gt; ";
                                if (member.isConstant) sys[out++] = "&lt;constant&gt; ";
                            !}&nbsp;</td>
                            <td class="nameDescription">
                                <div class="fixedFont">
                                <if test="shouldDisplayMemberOf(member)">{+member.memberOfDisplay+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>
                                </div>
                                <div class="description">{+resolveLinks(summarize(member.desc))+}</div>
                            </td>
                        </tr>
                    </for>
                    </tbody>
                </table>
                </if>
                
                <if test="data.inheritsFrom.length">
                <dl class="inheritsList">
                {!
                    var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
                    
                    var contributers = [];
                    borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                    for (var i = 0, l = contributers.length; i < l; i++) {
                        sys[out++] =
                            "<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                            +
                            "<dd>" +
                            borrowedMembers
                            .filter(
                                function($) { return $.memberOf == contributers[i] }
                            )
                            .sort(makeSortby("name"))
                            .map(
                                function($) { return new Link().toSymbol($.alias).withText($.name) }
                            )
                            .join(", ")
                            +
                            "</dd>";
                    }
                !}
                </dl>
                </if>
            </if>

<!-- ============================== methods summary ======================== -->
            <if test="data.methods.length">
                {! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
                <if test="ownMethods.length">
                <table class="summaryTable" cellspacing="0" summary="A summary of the methods documented in the class {+data.alias+}.">
                    <caption>Method Summary</caption>
                    <thead>
                        <tr>
                            <th scope="col">Method Attributes</th>
                            <th scope="col">Method Name and Description</th>
                        </tr>
                    </thead>
                    <tbody>
                    <for each="member" in="ownMethods">
                        <tr>
                            <td class="attributes">{!
                                if (member.isPrivate) sys[out++] = "&lt;private&gt; ";
                                if (member.isInner) sys[out++] = "&lt;inner&gt; ";
                                if (member.isStatic) sys[out++] = "&lt;static&gt; ";
                            !}&nbsp;</td>
                            <td class="nameDescription">
                                <div class="fixedFont"><if test="shouldDisplayMemberOf(member)">{+member.memberOfDisplay+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>{+makeSignature(member.params)+}
                                </div>
                                <div class="description">{+resolveLinks(summarize(member.desc))+}</div>
                            </td>
                        </tr>
                    </for>
                    </tbody>
                </table>
                </if>
                
                <if test="data.inheritsFrom.length">
                <dl class="inheritsList">
                {!
                    var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
                    var contributers = [];
                    borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                    for (var i = 0, l = contributers.length; i < l; i++) {
                        sys[out++] =
                            "<dt>Methods borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                            +
                            "<dd>" +
                            borrowedMembers
                            .filter(
                                function($) { return $.memberOf == contributers[i] }
                            )
                            .sort(makeSortby("name"))
                            .map(
                                function($) { return new Link().toSymbol($.alias).withText($.name) }
                            )
                            .join(", ")
                            +
                            "</dd>";
                    }
                
                !}
                </dl>
                </if>
            </if>
<!-- ============================== events summary ======================== -->
            <if test="data.events.length">
                {! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
                <if test="ownEvents.length">
                <table class="summaryTable" cellspacing="0" summary="A summary of the events documented in the class {+data.alias+}.">
                    <caption>Event Summary</caption>
                    <thead>
                        <tr>
                            <th scope="col">Event Attributes</th>
                            <th scope="col">Event Name and Description</th>
                        </tr>
                    </thead>
                    <tbody>
                    <for each="member" in="ownEvents">
                        <tr>
                            <td class="attributes">{!
                                if (member.isPrivate) sys[out++] = "&lt;private&gt; ";
                                if (member.isInner) sys[out++] = "&lt;inner&gt; ";
                                if (member.isStatic) sys[out++] = "&lt;static&gt; ";
                            !}&nbsp;</td>
                            <td class="nameDescription">
                                <div class="fixedFont"><if test="shouldDisplayMemberOf(member)">{+member.memberOfDisplay+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>{+makeSignature(member.params)+}
                                </div>
                                <div class="description">{+resolveLinks(summarize(member.desc))+}</div>
                            </td>
                        </tr>
                    </for>
                    </tbody>
                </table>
                </if>
                
                <if test="data.inheritsFrom.length">
                <dl class="inheritsList">
                {!
                    var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
                    var contributers = [];
                    borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                    for (var i = 0, l = contributers.length; i < l; i++) {
                        sys[out++] =
                            "<dt>Events borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                            +
                            "<dd>" +
                            borrowedMembers
                            .filter(
                                function($) { return $.memberOf == contributers[i] }
                            )
                            .sort(makeSortby("name"))
                            .map(
                                function($) { return new Link().toSymbol($.alias).withText($.name) }
                            )
                            .join(", ")
                            +
                            "</dd>";
                    }
                
                !}
                </dl>
                </if>
            </if>





<!-- ============================== scope info ============================= -->
            <if test="!data.isScope && data.scopeChain.length">
            
            <div class="details"><a name="constructor"> </a>
                <div class="sectionTitle">
                    Scope Info
                </div>

                <for each="scope" in="data.scopeChain">
                
                {!
                if (!scope.isScope) continue;
                if (scope.isWith) scope = scope.originalSymbol;
                if (!scope.properties.length && !scope.methods.length) continue;
                !}
                
                <div class="scopeName">{+scope.alias+}</div>
                
                <if test="scope.properties.length">
                <dl class="inheritsList">
                {!
                    var borrowedMembers = scope.properties;
                    sys[out++] =
                        "<dt>Variables defined in scope "+new Link().toSymbol(scope.alias)+": </dt>"
                        +
                        "<dd>" +
                        borrowedMembers
                        .sort(makeSortby("name"))
                        .map(
                            function($) { return new Link().toSymbol($.alias).withText($.name) }
                        )
                        .join(", ")
                        +
                        "</dd>";
                !}
                </dl>
                </if>

                <if test="scope.methods.length">
                <dl class="inheritsList">
                {!
                    var borrowedMembers = scope.methods;
                    sys[out++] =
                        "<dt>Functions defined in scope "+new Link().toSymbol(scope.alias)+": </dt>"
                        +
                        "<dd>" +
                        borrowedMembers
                        .sort(makeSortby("name"))
                        .map(
                            function($) { return new Link().toSymbol($.alias).withText($.name) }
                        )
                        .join(", ")
                        +
                        "</dd>";
                !}
                </dl>
                </if>
                </for>

            </div>
            
            </if>


<!-- ============================== constructor details ==================== -->        
            <if test="!data.isBuiltin() && !data.isScope && (data.isNamespace || data.is('CONSTRUCTOR'))">
            <div class="details"><a name="constructor"> </a>
                <div class="sectionTitle">
                    {+classType+}Detail
                </div>
                
                <div class="fixedFont">{!
                    if (data.isPrivate) sys[out++] = "&lt;private&gt; ";
                    if (data.isInner) sys[out++] = "&lt;inner&gt; ";
                !}
                        <b>{+ data.alias +}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
                </div>
                
                <div class="description">
                    {+resolveLinks(data.desc)+}
                    <if test="data.author"><br /><i>Author: </i>{+data.author+}.</if>
                </div>
                
                <if test="data.example.length">
                <for each="example" in="data.example">
                <pre class="code">{+example+}</pre>
                </for>
                </if>
                
                
                    <if test="data.params.length">
                        <dl class="detailList">
                        <dt class="heading">Parameters:</dt>
                        <for each="item" in="data.params">
                            <dt>
                                {+((item.type)?""+("<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type)+"}</span> ")) : "")+} <b>{+item.name+}</b>
                                <if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
                            </dt>
                                <dd>{+resolveLinks(item.desc)+}</dd>
                        </for>
                        </dl>
                    </if>
                    <if test="data.deprecated">
                        <dl class="detailList">
                        <dt class="heading">Deprecated:</dt>
                        <dt>
                            {+resolveLinks(data.deprecated)+}
                        </dt>
                        </dl>
                    </if>
                    <if test="data.since">
                        <dl class="detailList">
                        <dt class="heading">Since:</dt>
                            <dd>{+ data.since +}</dd>
                        </dl>
                    </if>
                    <if test="data.exceptions.length">
                        <dl class="detailList">
                        <dt class="heading">Throws:</dt>
                        <for each="item" in="data.exceptions">
                            <dt>
                                {+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
                            </dt>
                                <dd>{+resolveLinks(item.desc)+}</dd>
                        </for>
                        </dl>
                    </if>
                    <if test="data.returns.length">
                        <dl class="detailList">
                        <dt class="heading">Returns:</dt>
                        <for each="item" in="data.returns">
                                <dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
                        </for>
                        </dl>
                    </if>
                    <if test="data.requires.length">
                        <dl class="detailList">
                        <dt class="heading">Requires:</dt>
                        <for each="item" in="data.requires">
                            <dd>{+ resolveLinks(item) +}</dd>
                        </for>
                        </dl>
                    </if>
                    <if test="data.see.length">
                        <dl class="detailList">
                        <dt class="heading">See:</dt>
                        <for each="item" in="data.see">
                            <dd>{+ new Link().toSymbol(item) +}</dd>
                        </for>
                        </dl>
                    </if>

            </div>
            </if>

<!-- ============================== field details ========================== -->        
            <if test="defined(ownProperties) && ownProperties.length">
                <div class="sectionTitle">
                    Field Detail
                </div>
                <for each="member" in="ownProperties">
                    <a name="{+Link.symbolNameToLinkName(member)+}"> </a>
                    <div class="fixedFont">{!
                        if (member.isPrivate) sys[out++] = "&lt;private&gt; ";
                        if (member.isInner) sys[out++] = "&lt;inner&gt; ";
                        if (member.isStatic) sys[out++] = "&lt;static&gt; ";
                        if (member.isConstant) sys[out++] = "&lt;constant&gt; ";
                    !}
                    
                    <if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
                    <if test="shouldDisplayMemberOf(member)"><span class="light">{+member.memberOfDisplay+}.</span></if><b>{+member.name+}</b>
                    
                    </div>
                    <div class="description">
                        <p><i>Defined in: </i> {+new Link().toSrc(member.srcFile, member.lineNumber)+}.</p>
                        {+resolveLinks(member.desc)+}
                        <if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
                    </div>
                    
                    <if test="member.example.length">
                    <for each="example" in="member.example">
                    <pre class="code">{+example+}</pre>
                    </for>
                    </if>

                        <if test="member.deprecated">
                            <dl class="detailList">
                            <dt class="heading">Deprecated:</dt>
                            <dt>
                                {+ resolveLinks(member.deprecated) +}
                            </dt>
                            </dl>
                        </if>
                        <if test="member.since">
                            <dl class="detailList">
                            <dt class="heading">Since:</dt>
                                <dd>{+ member.since +}</dd>
                            </dl>
                        </if>
                        <if test="member.see.length">
                            <dl class="detailList">
                            <dt class="heading">See:</dt>
                            <for each="item" in="member.see">
                            <dd>{+ new Link().toSymbol(item) +}</dd>
                            </for>
                            </dl>
                        </if>
                        <if test="member.defaultValue">
                            <dl class="detailList">
                            <dt class="heading">Default Value:</dt>
                            <dd>
                                {+resolveLinks(member.defaultValue)+}
                            </dd>
                            </dl>
                        </if>

                    <if test="!$member_last"><hr /></if>
                </for>
            </if>

<!-- ============================== method details ========================= -->        
            <if test="defined(ownMethods) && ownMethods.length">
                <div class="sectionTitle">
                    Method Detail
                </div>
                <for each="member" in="ownMethods">
                    <a name="{+Link.symbolNameToLinkName(member)+}"> </a>
                    <div class="fixedFont">{!
                        if (member.isPrivate) sys[out++] = "&lt;private&gt; ";
                        if (member.isInner) sys[out++] = "&lt;inner&gt; ";
                        if (member.isStatic) sys[out++] = "&lt;static&gt; ";
                    !}
                    
                    <if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
                    <if test="shouldDisplayMemberOf(member)"><span class="light">{+member.memberOfDisplay+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}
                    
                    </div>
                    <div class="description">
                      <p><i>Defined in: </i> {+new Link().toSrc(member.srcFile, member.lineNumber)+}.</p>
                        {+resolveLinks(member.desc)+}
                        <if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
                    </div>
                    
                    <if test="member.example.length">
                    <for each="example" in="member.example">
                    <pre class="code">{+example+}</pre>
                    </for>
                    </if>
                    
                        <if test="member.params.length">
                            <dl class="detailList">
                            <dt class="heading">Parameters:</dt>
                            <for each="item" in="member.params">
                                <dt>
                                    {+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
                                    <if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
                                </dt>
                                <dd>{+resolveLinks(item.desc)+}</dd>
                            </for>
                            </dl>
                        </if>
                        <if test="member.deprecated">
                            <dl class="detailList">
                            <dt class="heading">Deprecated:</dt>
                            <dt>
                                {+ resolveLinks(member.deprecated) +}
                            </dt>
                            </dl>
                        </if>
                        <if test="member.since">
                            <dl class="detailList">
                            <dt class="heading">Since:</dt>
                                <dd>{+ member.since +}</dd>
                            </dl>
                            </dl>
                        </if>
                        <if test="member.exceptions.length">
                            <dl class="detailList">
                            <dt class="heading">Throws:</dt>
                            <for each="item" in="member.exceptions">
                                <dt>
                                    {+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
                                </dt>
                                <dd>{+resolveLinks(item.desc)+}</dd>
                            </for>
                            </dl>
                        </if>
                        <if test="member.returns.length">
                            <dl class="detailList">
                            <dt class="heading">Returns:</dt>
                            <for each="item" in="member.returns">
                                <dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
                            </for>
                            </dl>
                        </if>
                        <if test="member.requires.length">
                            <dl class="detailList">
                            <dt class="heading">Requires:</dt>
                            <for each="item" in="member.requires">
                                <dd>{+ resolveLinks(item) +}</dd>
                            </for>
                            </dl>
                        </if>
                        <if test="member.see.length">
                            <dl class="detailList">
                            <dt class="heading">See:</dt>
                            <for each="item" in="member.see">
                                <dd>{+ new Link().toSymbol(item) +}</dd>
                            </for>
                            </dl>
                        </if>

                    <if test="!$member_last"><hr /></if>
                </for>
            </if>
            
<!-- ============================== event details ========================= -->        
            <if test="defined(ownEvents) && ownEvents.length">
                <div class="sectionTitle">
                    Event Detail
                </div>
                <for each="member" in="ownEvents">
                    <a name="event:{+Link.symbolNameToLinkName(member)+}"> </a>
                    <div class="fixedFont">{!
                        if (member.isPrivate) sys[out++] = "&lt;private&gt; ";
                        if (member.isInner) sys[out++] = "&lt;inner&gt; ";
                        if (member.isStatic) sys[out++] = "&lt;static&gt; ";
                    !}
                    
                    <if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
                    <if test="shouldDisplayMemberOf(member)"><span class="light">{+member.memberOfDisplay+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}
                    
                    </div>
                    <div class="description">
                      <p><i>Defined in: </i> {+new Link().toSrc(member.srcFile, member.lineNumber)+}.</p>
                        {+resolveLinks(member.desc)+}
                        <if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
                    </div>
                    
                    <if test="member.example.length">
                    <for each="example" in="member.example">
                    <pre class="code">{+example+}</pre>
                    </for>
                    </if>
                    
                        <if test="member.params.length">
                            <dl class="detailList">
                            <dt class="heading">Parameters:</dt>
                            <for each="item" in="member.params">
                                <dt>
                                    {+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
                                    <if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
                                </dt>
                                <dd>{+ resolveLinks(item.desc) +}</dd>
                            </for>
                            </dl>
                        </if>
                        <if test="member.deprecated">
                            <dl class="detailList">
                            <dt class="heading">Deprecated:</dt>
                            <dt>
                                {+ resolveLinks(member.deprecated) +}
                            </dt>
                            </dl>
                        </if>
                        <if test="member.since">
                            <dl class="detailList">
                            <dt class="heading">Since:</dt>
                                <dd>{+ member.since +}</dd>
                            </dl>
                            </dl>
                        </if>
                        <if test="member.exceptions.length">
                            <dl class="detailList">
                            <dt class="heading">Throws:</dt>
                            <for each="item" in="member.exceptions">
                                <dt>
                                    {+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
                                </dt>
                                <dd>{+ resolveLinks(item.desc) +}</dd>
                            </for>
                            </dl>
                        </if>
                        <if test="member.returns.length">
                            <dl class="detailList">
                            <dt class="heading">Returns:</dt>
                            <for each="item" in="member.returns">
                                <dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
                            </for>
                            </dl>
                        </if>
                        <if test="member.requires.length">
                            <dl class="detailList">
                            <dt class="heading">Requires:</dt>
                            <for each="item" in="member.requires">
                                <dd>{+ resolveLinks(item) +}</dd>
                            </for>
                            </dl>
                        </if>
                        <if test="member.see.length">
                            <dl class="detailList">
                            <dt class="heading">See:</dt>
                            <for each="item" in="member.see">
                                <dd>{+ new Link().toSymbol(item) +}</dd>
                            </for>
                            </dl>
                        </if>

                    <if test="!$member_last"><hr /></if>
                </for>
            </if>
            
            <hr />
        </div>

        
<!-- ============================== footer ================================= -->
        <div class="fineprint" style="clear:both">
            <if test="JSDOC.opt.D.copyright">&copy;{+JSDOC.opt.D.copyright+}<br /></if>
            Documentation generated by <a href="http://code.google.com/p/jsdoc-toolkit/" target="_blank">JsDoc Toolkit</a> {+JSDOC.VERSION+} on {+new Date()+}
        </div>
    </div>
</body>
</html>
